#lang racket
(define (numer x) (car x)) ;чисельник 
(define (denom x) (cdr x)) ;знаменник 
(define (make-rat n d) 
(let ((nod (gcd n d))) 
(cons (/ n nod) (/ d nod))))
 
(define(print-rat x) ; друк пари 
(newline) 
(display (numer x)) 
(display "/") 
(display (denom x)))
(define (add-rat x y) 
(make-rat (+ (* (numer x) (denom y) 
) 
(* (numer y) (denom x) 
) 
)
(* (denom x) (denom y)
) 
) 
)
(define (equal-rat? x y) 
(= (* (numer x) (denom y)) 
(* (numer y) (denom x))))
(define (less-rat? x y) 
(< (* (numer x) (denom y)) 
(* (numer y) (denom x))))
(define mol1 (make-rat 1 6))
(define mol2 (make-rat 1 3))
(define mol3 (make-rat 1 2))
(define cof (make-rat 1 1))
(display "1-ша порція молока")
(print-rat mol1)
(display "\n 2-га порція молока")
(print-rat mol2)
(display "\n 1-ша + 2-га порція молока")
(print-rat (add-rat mol1 mol2))
(display "\n 3-тя порція молока")
(print-rat mol3)
(display "\n 1-ша + 2-га + 3-тя порція молока")
(define mol (add-rat mol1 (add-rat mol2 mol3)))
(print-rat mol)
(display "\n порція кави")
(print-rat (make-rat 1 1))
(cond ((equal-rat? cof mol)
 (display "\n порції рівні"))
      ((less-rat? cof mol)
 (display "\n кави менше"))
      (else 
 (display "\n кави більше"))) 